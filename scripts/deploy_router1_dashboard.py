#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ router1
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç FastAPI —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –≤ Grafana
"""

import requests
import json
import sys
from datetime import datetime

class Router1DashboardDeployer:
    def __init__(self, api_base_url="http://dashboards-service.localhost:8050"):
        self.api_base_url = api_base_url
        
    def create_router1_dashboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ router1"""
        
        dashboard_data = {
            "dashboard": {
                "title": "Router1 Network Monitoring",
                "description": "Comprehensive monitoring dashboard for Router1 network metrics",
                "tags": ["router1", "network", "monitoring", "production"],
                "timezone": "browser",
                "schemaVersion": 16,
                "version": 1,
                "refresh": "30s",
                "time": {
                    "from": "now-1h",
                    "to": "now"
                },
                "panels": [
                    {
                        "id": 1,
                        "title": "Interface Traffic (In/Out)",
                        "type": "graph",
                        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
                        "datasource": {"type": "prometheus"},
                        "targets": [
                            {
                                "expr": "rate(ifInOctets{instance=\"router1\",ifDescr!~\".*Loopback.*\"}[5m])*8",
                                "legendFormat": "{{ifDescr}} In (bps)"
                            },
                            {
                                "expr": "rate(ifOutOctets{instance=\"router1\",ifDescr!~\".*Loopback.*\"}[5m])*8",
                                "legendFormat": "{{ifDescr}} Out (bps)"
                            }
                        ]
                    },
                    {
                        "id": 2,
                        "title": "CPU Utilization",
                        "type": "singlestat",
                        "gridPos": {"h": 4, "w": 6, "x": 12, "y": 0},
                        "datasource": {"type": "prometheus"},
                        "targets": [
                            {
                                "expr": "avg(cpu_usage{instance=\"router1\"})",
                                "legendFormat": "CPU %"
                            }
                        ],
                        "thresholds": [80, 60]
                    },
                    {
                        "id": 3,
                        "title": "Memory Utilization",
                        "type": "singlestat",
                        "gridPos": {"h": 4, "w": 6, "x": 18, "y": 0},
                        "datasource": {"type": "prometheus"},
                        "targets": [
                            {
                                "expr": "memory_usage{instance=\"router1\"}",
                                "legendFormat": "Memory %"
                            }
                        ],
                        "thresholds": [85, 70]
                    },
                    {
                        "id": 4,
                        "title": "Interface Status",
                        "type": "table",
                        "gridPos": {"h": 8, "w": 12, "x": 12, "y": 4},
                        "datasource": {"type": "prometheus"},
                        "targets": [
                            {
                                "expr": "ifOperStatus{instance=\"router1\"}",
                                "legendFormat": "{{ifDescr}}"
                            }
                        ]
                    },
                    {
                        "id": 5,
                        "title": "Interface Errors",
                        "type": "graph",
                        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
                        "datasource": {"type": "prometheus"},
                        "targets": [
                            {
                                "expr": "rate(ifInErrors{instance=\"router1\"}[5m])",
                                "legendFormat": "{{ifDescr}} In Errors/sec"
                            },
                            {
                                "expr": "rate(ifOutErrors{instance=\"router1\"}[5m])",
                                "legendFormat": "{{ifDescr}} Out Errors/sec"
                            }
                        ]
                    },
                    {
                        "id": 6,
                        "title": "Device Uptime",
                        "type": "singlestat",
                        "gridPos": {"h": 4, "w": 6, "x": 12, "y": 12},
                        "datasource": {"type": "prometheus"},
                        "targets": [
                            {
                                "expr": "sysUpTime{instance=\"router1\"}/100",
                                "legendFormat": "Uptime"
                            }
                        ]
                    },
                    {
                        "id": 7,
                        "title": "ICMP Ping Response",
                        "type": "graph",
                        "gridPos": {"h": 4, "w": 6, "x": 18, "y": 12},
                        "datasource": {"type": "prometheus"},
                        "targets": [
                            {
                                "expr": "probe_success{instance=\"router1\"}",
                                "legendFormat": "Ping Success"
                            },
                            {
                                "expr": "probe_duration_seconds{instance=\"router1\"}*1000",
                                "legendFormat": "Response Time (ms)"
                            }
                        ]
                    }
                ]
            },
            "folderId": 0,
            "overwrite": True,
            "message": f"Router1 monitoring dashboard created on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        }
        
        return dashboard_data
    
    def deploy(self):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ router1"""
        print("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Router1")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
        try:
            health_response = requests.get(f"{self.api_base_url}/healthz", timeout=5)
            if health_response.status_code == 200:
                print("   ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {health_response.status_code})")
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
        print("2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...")
        try:
            dashboard_data = self.create_router1_dashboard()
            response = requests.post(
                f"{self.api_base_url}/dashboards/",
                json=dashboard_data,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                result = response.json()
                uid = result.get('uid')
                dashboard_id = result.get('id')
                url = result.get('url', '')
                
                print("   ‚úÖ –î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                print(f"   üìä UID: {uid}")
                print(f"   üÜî ID: {dashboard_id}")
                print(f"   üîó URL: http://grafana.localhost:3001{url}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞...")
                try:
                    check_response = requests.get(f"{self.api_base_url}/dashboards/{uid}", timeout=10)
                    if check_response.status_code == 200:
                        dashboard_info = check_response.json()
                        title = dashboard_info.get('dashboard', {}).get('title', 'N/A')
                        panels_count = len(dashboard_info.get('dashboard', {}).get('panels', []))
                        print(f"   ‚úÖ –î–∞—à–±–æ—Ä–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω: '{title}' —Å {panels_count} –ø–∞–Ω–µ–ª—è–º–∏")
                    else:
                        print("   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                
                return True
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return False
    
    def show_metrics_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–∏–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã"""
        print("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–†–ï–ë–£–ï–ú–´–• –ú–ï–¢–†–ò–ö–ê–• PROMETHEUS")
        print("=" * 50)
        print("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print()
        print("üåê –°–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print("  - ifInOctets{instance=\"router1\"}")
        print("  - ifOutOctets{instance=\"router1\"}")
        print("  - ifInErrors{instance=\"router1\"}")
        print("  - ifOutErrors{instance=\"router1\"}")
        print("  - ifOperStatus{instance=\"router1\"}")
        print()
        print("üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print("  - cpu_usage{instance=\"router1\"}")
        print("  - memory_usage{instance=\"router1\"}")
        print("  - sysUpTime{instance=\"router1\"}")
        print()
        print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:")
        print("  - probe_success{instance=\"router1\"}")
        print("  - probe_duration_seconds{instance=\"router1\"}")
        print()
        print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SNMP Exporter –∏ Blackbox Exporter –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("   –¥–ª—è —Å–±–æ—Ä–∞ —ç—Ç–∏—Ö –º–µ—Ç—Ä–∏–∫ —Å router1!")

def main():
    if len(sys.argv) > 1 and sys.argv[1] == "--info":
        deployer = Router1DashboardDeployer()
        deployer.show_metrics_info()
        return
    
    deployer = Router1DashboardDeployer()
    
    success = deployer.deploy()
    
    if success:
        print("\nüéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Grafana: http://grafana.localhost:3001")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –¥–∞—à–±–æ—Ä–¥—É")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –æ—Ç router1")
        print("4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã")
        deployer.show_metrics_info()
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FastAPI —Å–µ—Ä–≤–∏—Å–∞ (http://dashboards-service.localhost:8050)")
        print("- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Grafana (http://grafana.localhost:3001)")
        print("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ API –∫–ª—é—á–∞")
        sys.exit(1)

if __name__ == "__main__":
    main()
