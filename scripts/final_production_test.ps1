# –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
Write-Host "üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω" -ForegroundColor Green

$baseUrl = "http://dashboards-service.localhost:8050"
$testPassed = 0
$testTotal = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function Test-Result {
    param(
        [string]$TestName,
        [bool]$Success,
        [string]$Details = ""
    )
    
    $global:testTotal++
    if ($Success) {
        $global:testPassed++
        Write-Host "‚úÖ PASS $TestName" -ForegroundColor Green
    } else {
        Write-Host "‚ùå FAIL $TestName" -ForegroundColor Red
    }
    
    if ($Details) {
        Write-Host "    üìù $Details" -ForegroundColor Gray
    }
}

# –¢–µ—Å—Ç 1: Health Check
try {
    $healthResponse = Invoke-RestMethod -Uri "$baseUrl/healthz" -Method Get -TimeoutSec 5
    $success = $healthResponse.status -eq "healthy"
    Test-Result "Health Check" $success "Status: $($healthResponse.status), Version: $($healthResponse.version)"
} catch {
    Test-Result "Health Check" $false "Exception: $($_.Exception.Message)"
}

# –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ –¥–∞—à–±–æ—Ä–¥–æ–≤
try {
    $dashboards = Invoke-RestMethod -Uri "$baseUrl/dashboards/" -Method Get -TimeoutSec 10
    $count = $dashboards.Count
    Test-Result "Dashboard List" $true "Found $count dashboards"
} catch {
    Test-Result "Dashboard List" $false "Exception: $($_.Exception.Message)"
}

# –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
$dashboardData = @{
    dashboard = @{
        title = "Production Test Dashboard"
        timezone = "browser"
        schemaVersion = 16
        tags = @("production", "test")
        panels = @()
    }
    folderId = 0
    overwrite = $true
} | ConvertTo-Json -Depth 10

try {
    $createResponse = Invoke-RestMethod -Uri "$baseUrl/dashboards/" -Method Post -Body $dashboardData -ContentType "application/json" -TimeoutSec 10
    $dashboardUid = $createResponse.uid
    Test-Result "Dashboard Create" $true "Created dashboard with UID: $dashboardUid"
    
    # –¢–µ—Å—Ç 4: –ß—Ç–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
    try {
        $readResponse = Invoke-RestMethod -Uri "$baseUrl/dashboards/$dashboardUid" -Method Get -TimeoutSec 5
        $title = $readResponse.dashboard.title
        Test-Result "Dashboard Read" $true "Title: $title"
    } catch {
        Test-Result "Dashboard Read" $false "Exception: $($_.Exception.Message)"
    }
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    try {
        $visualizeResponse = Invoke-RestMethod -Uri "$baseUrl/dashboards/$dashboardUid/visualize" -Method Get -TimeoutSec 5
        Test-Result "Dashboard Visualization" $true "Visualization successful"
    } catch {
        Test-Result "Dashboard Visualization" $false "Exception: $($_.Exception.Message)"
    }
    
    try {
        $exportResponse = Invoke-RestMethod -Uri "$baseUrl/dashboards/$dashboardUid/export" -Method Get -TimeoutSec 5
        Test-Result "Dashboard Export" $true "Export successful"
    } catch {
        Test-Result "Dashboard Export" $false "Exception: $($_.Exception.Message)"
    }
    
    # –û—á–∏—Å—Ç–∫–∞
    try {
        $deleteResponse = Invoke-RestMethod -Uri "$baseUrl/dashboards/$dashboardUid" -Method Delete -TimeoutSec 5
        Write-Host "‚úÖ Cleanup: Dashboard deleted successfully" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Cleanup warning: $($_.Exception.Message)" -ForegroundColor Yellow
    }
    
} catch {
    Test-Result "Dashboard Create" $false "Exception: $($_.Exception.Message)"
}

# –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
try {
    $errorResponse = Invoke-RestMethod -Uri "$baseUrl/dashboards/non-existent-uid" -Method Get -TimeoutSec 5 -ErrorAction Stop
    Test-Result "Error Handling (404)" $false "Expected 404 but got success"
} catch {
    if ($_.Exception.Response.StatusCode -eq 404) {
        Test-Result "Error Handling (404)" $true "Correctly returned 404"
    } else {
        Test-Result "Error Handling (404)" $false "Wrong status code: $($_.Exception.Response.StatusCode)"
    }
}

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
Write-Host "`n" + "=" * 60 -ForegroundColor Cyan
Write-Host "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ù" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan

Write-Host "–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $testPassed/$testTotal" -ForegroundColor White
$successRate = [math]::Round(($testPassed / $testTotal) * 100, 1)
Write-Host "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $successRate%" -ForegroundColor White

if ($testPassed -eq $testTotal) {
    Write-Host "`nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é." -ForegroundColor Green
    exit 0
} else {
    Write-Host "`n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º." -ForegroundColor Yellow
    exit 1
}
