#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω - –≤—Å–µ 15 —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π
"""

import requests
import json
import os
import tempfile
import time

print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ù - –í–°–ï 15 –≠–ù–î–ü–û–ò–ù–¢–û–í")
print("=" * 75)

BASE_URL = "http://localhost:8050"
test_results = []
created_dashboard_uid = None
created_panel_id = None
duplicate_dashboard_uid = None

def log_test(test_num, test_name, success, details=""):
    test_results.append((test_name, success))
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    print(f"[{test_num:2}/15] {status} {test_name}")
    if details:
        print(f"         üìù {details}")

def test_endpoint_coverage():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 15 —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API"""
    global created_dashboard_uid, created_panel_id, duplicate_dashboard_uid
    
    # 1. Health Check
    try:
        response = requests.get(f"{BASE_URL}/healthz", timeout=5)
        success = response.status_code == 200
        data = response.json() if success else {}
        log_test(1, "Health Check", success, f"Status: {response.status_code}")
    except Exception as e:
        log_test(1, "Health Check", False, f"Exception: {str(e)}")
    
    # 2. List Dashboards
    try:
        response = requests.get(f"{BASE_URL}/api/", timeout=10)
        success = response.status_code == 200
        count = len(response.json()) if success else 0
        log_test(2, "List Dashboards", success, f"Found {count} dashboards")
    except Exception as e:
        log_test(2, "List Dashboards", False, f"Exception: {str(e)}")
    
    # 3. Create Dashboard
    try:
        dashboard_data = {
            "dashboard": {
                "title": "Final Production Test Dashboard",
                "tags": ["final", "production", "test"],
                "panels": [],
                "time": {"from": "now-1h", "to": "now"},
                "refresh": "5s",
                "timezone": "browser",
                "schemaVersion": 16
            },
            "folderId": 0,
            "overwrite": True
        }
        
        response = requests.post(f"{BASE_URL}/api/", json=dashboard_data)
        success = response.status_code == 201
        if success:
            data = response.json()
            created_dashboard_uid = data.get("uid")
            log_test(3, "Create Dashboard", success, f"UID: {created_dashboard_uid}")
        else:
            log_test(3, "Create Dashboard", success, f"Status: {response.status_code}")
    except Exception as e:
        log_test(3, "Create Dashboard", False, f"Exception: {str(e)}")
    
    # 4. Get Dashboard
    try:
        if created_dashboard_uid:
            response = requests.get(f"{BASE_URL}/api/{created_dashboard_uid}")
            success = response.status_code == 200
            title = response.json().get("dashboard", {}).get("title", "N/A") if success else "N/A"
            log_test(4, "Get Dashboard", success, f"Title: {title}")
        else:
            log_test(4, "Get Dashboard", False, "No UID available")
    except Exception as e:
        log_test(4, "Get Dashboard", False, f"Exception: {str(e)}")
    
    # 5. Update Dashboard
    try:
        if created_dashboard_uid:
            update_data = {
                "dashboard": {
                    "title": "Final Production Test Dashboard - UPDATED",
                    "tags": ["final", "production", "test", "updated"],
                    "panels": [],
                    "time": {"from": "now-2h", "to": "now"},
                    "refresh": "10s",
                    "timezone": "browser",
                    "schemaVersion": 16
                },
                "folderId": 0,
                "overwrite": True
            }
            
            response = requests.put(f"{BASE_URL}/api/{created_dashboard_uid}", json=update_data)
            success = response.status_code == 200
            log_test(5, "Update Dashboard", success, f"Status: {response.status_code}")
        else:
            log_test(5, "Update Dashboard", False, "No UID available")
    except Exception as e:
        log_test(5, "Update Dashboard", False, f"Exception: {str(e)}")
    
    # 6. Duplicate Dashboard
    try:
        if created_dashboard_uid:
            response = requests.post(f"{BASE_URL}/api/{created_dashboard_uid}/duplicate")
            success = response.status_code == 200
            if success:
                data = response.json()
                duplicate_dashboard_uid = data.get('uid')
                log_test(6, "Duplicate Dashboard", success, f"Duplicate UID: {duplicate_dashboard_uid}")
            else:
                log_test(6, "Duplicate Dashboard", success, f"Status: {response.status_code}")
        else:
            log_test(6, "Duplicate Dashboard", False, "No UID available")
    except Exception as e:
        log_test(6, "Duplicate Dashboard", False, f"Exception: {str(e)}")
    
    # 7. Visualize Dashboard
    try:
        if created_dashboard_uid:
            response = requests.get(f"{BASE_URL}/api/{created_dashboard_uid}/visualize")
            success = response.status_code == 200
            log_test(7, "Visualize Dashboard", success, f"Status: {response.status_code}")
        else:
            log_test(7, "Visualize Dashboard", False, "No UID available")
    except Exception as e:
        log_test(7, "Visualize Dashboard", False, f"Exception: {str(e)}")
    
    # 8. Export Dashboard
    try:
        if created_dashboard_uid:
            response = requests.get(f"{BASE_URL}/api/{created_dashboard_uid}/export")
            success = response.status_code == 200
            if success:
                data = response.json()
                filename = data.get("filename", "unknown")
                log_test(8, "Export Dashboard", success, f"Exported to: {filename}")
            else:
                log_test(8, "Export Dashboard", success, f"Status: {response.status_code}")
        else:
            log_test(8, "Export Dashboard", False, "No UID available")
    except Exception as e:
        log_test(8, "Export Dashboard", False, f"Exception: {str(e)}")
    
    # 9. Create Panel (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π)
    try:
        if created_dashboard_uid:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–∞–Ω–µ–ª–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            panel_dashboard_data = {
                "dashboard": {
                    "title": "Panel Test Dashboard",
                    "tags": ["panel", "test"],
                    "panels": [],
                    "timezone": "browser",
                    "schemaVersion": 16
                },
                "folderId": 0,
                "overwrite": True
            }
            
            panel_dashboard_response = requests.post(f"{BASE_URL}/api/", json=panel_dashboard_data)
            
            if panel_dashboard_response.status_code == 201:
                panel_dashboard_uid = panel_dashboard_response.json().get("uid")
                
                panel_data = {
                    "title": "Production Test Panel",
                    "type": "stat",
                    "datasource": {
                        "type": "prometheus",
                        "uid": "prometheus"
                    },
                    "targets": [
                        {
                            "refId": "A",
                            "expr": "up",
                            "datasource": {
                                "type": "prometheus",
                                "uid": "prometheus"
                            },
                            "format": "time_series"
                        }
                    ],
                    "gridPos": {
                        "h": 6,
                        "w": 8,
                        "x": 0,
                        "y": 0
                    },
                    "options": {}
                }
                
                response = requests.post(f"{BASE_URL}/api/{panel_dashboard_uid}/panels", json=panel_data)
                success = response.status_code == 200
                if success:
                    data = response.json()
                    created_panel_id = data.get("id", 1)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º UID –¥–∞—à–±–æ—Ä–¥–∞ —Å –ø–∞–Ω–µ–ª—å—é
                    created_dashboard_uid = panel_dashboard_uid
                    log_test(9, "Create Panel", success, f"Panel ID: {created_panel_id}")
                else:
                    log_test(9, "Create Panel", False, f"Status: {response.status_code}")
            else:
                log_test(9, "Create Panel", False, "Failed to create panel dashboard")
        else:
            log_test(9, "Create Panel", False, "No UID available")
    except Exception as e:
        log_test(9, "Create Panel", False, f"Exception: {str(e)}")
    
    # 10. Get Panel
    try:
        if created_dashboard_uid and created_panel_id:
            response = requests.get(f"{BASE_URL}/api/{created_dashboard_uid}/panels/{created_panel_id}")
            success = response.status_code == 200
            if success:
                data = response.json()
                title = data.get('title', 'N/A')
                log_test(10, "Get Panel", success, f"Panel Title: {title}")
            else:
                log_test(10, "Get Panel", success, f"Status: {response.status_code}")
        else:
            log_test(10, "Get Panel", False, "No UID or Panel ID available")
    except Exception as e:
        log_test(10, "Get Panel", False, f"Exception: {str(e)}")
    
    # 11. Update Panel
    try:
        if created_dashboard_uid and created_panel_id:
            panel_update = {
                "id": created_panel_id,
                "title": "Updated Production Test Panel",
                "type": "graph",
                "datasource": {
                    "type": "prometheus",
                    "uid": "prometheus"
                },
                "targets": [
                    {
                        "refId": "A",
                        "expr": "up",
                        "datasource": {
                            "type": "prometheus",
                            "uid": "prometheus"
                        },
                        "format": "time_series"
                    }
                ],
                "gridPos": {
                    "h": 8,
                    "w": 12,
                    "x": 0,
                    "y": 0
                },
                "options": {}
            }
            
            response = requests.put(f"{BASE_URL}/api/{created_dashboard_uid}/panels/{created_panel_id}", json=panel_update)
            success = response.status_code == 200
            log_test(11, "Update Panel", success, f"Status: {response.status_code}")
        else:
            log_test(11, "Update Panel", False, "No UID or Panel ID available")
    except Exception as e:
        log_test(11, "Update Panel", False, f"Exception: {str(e)}")
    
    # 12. Compare Versions
    try:
        if created_dashboard_uid:
            response = requests.get(f"{BASE_URL}/api/{created_dashboard_uid}/compare?version1=1&version2=2")
            success = response.status_code in [200, 400, 404]  # –õ—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏–µ–º–ª–µ–º
            log_test(12, "Compare Versions", success, f"Status: {response.status_code}")
        else:
            log_test(12, "Compare Versions", False, "No UID available")
    except Exception as e:
        log_test(12, "Compare Versions", False, f"Exception: {str(e)}")
    
    # 13. Import Dashboard
    try:
        import_data = {
            "dashboard": {
                "title": "Final Import Test Dashboard",
                "tags": ["imported", "final-test"],
                "panels": [],
                "timezone": "browser",
                "schemaVersion": 16
            },
            "folderId": 0,
            "overwrite": True
        }
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as tmp_file:
            json.dump(import_data, tmp_file)
            tmp_filename = tmp_file.name
        
        try:
            with open(tmp_filename, 'rb') as f:
                files = {'file': ('dashboard.json', f, 'application/json')}
                response = requests.post(f"{BASE_URL}/api/import", files=files)
            
            success = response.status_code in [200, 201]
            log_test(13, "Import Dashboard", success, f"Status: {response.status_code}")
        finally:
            os.unlink(tmp_filename)
    except Exception as e:
        log_test(13, "Import Dashboard", False, f"Exception: {str(e)}")
    
    # 14. Delete Panel
    try:
        if created_dashboard_uid and created_panel_id:
            response = requests.delete(f"{BASE_URL}/api/{created_dashboard_uid}/panels/{created_panel_id}")
            success = response.status_code in [200, 204]
            log_test(14, "Delete Panel", success, f"Status: {response.status_code}")
        else:
            log_test(14, "Delete Panel", False, "No UID or Panel ID available")
    except Exception as e:
        log_test(14, "Delete Panel", False, f"Exception: {str(e)}")
    
    # 15. Delete Dashboard
    try:
        if created_dashboard_uid:
            response = requests.delete(f"{BASE_URL}/api/{created_dashboard_uid}")
            success = response.status_code in [200, 204]
            log_test(15, "Delete Dashboard", success, f"Status: {response.status_code}")
        else:
            log_test(15, "Delete Dashboard", False, "No UID available")
    except Exception as e:
        log_test(15, "Delete Dashboard", False, f"Exception: {str(e)}")

def cleanup_test_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    if duplicate_dashboard_uid:
        try:
            response = requests.delete(f"{BASE_URL}/api/{duplicate_dashboard_uid}")
            print(f"    üìù Cleanup duplicate dashboard: {response.status_code}")
        except:
            pass

def print_final_report():
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω"""
    passed = sum(1 for _, result in test_results if result)
    total = len(test_results)
    percentage = (passed / total * 100) if total > 0 else 0
    
    print("\n" + "=" * 75)
    print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ù")
    print("=" * 75)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {passed}/{total}")
    print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total - passed}/{total}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {percentage:.1f}%")
    
    if percentage >= 95:
        print("üéâ –ü–†–ï–í–û–°–•–û–î–ù–û! –°–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üöÄ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif percentage >= 85:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û! –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üìã –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã.")
    elif percentage >= 70:
        print("‚ö†Ô∏è  –•–û–†–û–®–û! –°–µ—Ä–≤–∏—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã.")
    else:
        print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("‚öíÔ∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")
    
    print("\nüìä –ü–æ–∫—Ä—ã—Ç–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:")
    for name, result in test_results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"    {status} {name}")
    
    print("\nüèÅ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 75)

def main():
    print("üîç –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—Å–µ—Ö 15 —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print()
    
    test_endpoint_coverage()
    cleanup_test_data()
    print_final_report()

if __name__ == "__main__":
    main()
