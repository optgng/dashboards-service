#!/usr/bin/env python3
"""–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π dashboards-service"""

import requests
import json
import time

# –í–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
POSSIBLE_BASE_URLS = [
    "http://localhost:8050",
    "http://127.0.0.1:8050", 
    "http://dashboards-service.localhost:8050"
]

BASE_URL = None

def check_service_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–±–æ—á–∏–π URL"""
    global BASE_URL
    
    print("üìù INFO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞...")
    
    for url in POSSIBLE_BASE_URLS:
        try:
            print(f"üìù INFO: –ü—Ä–æ–≤–µ—Ä—è–µ–º {url}")
            response = requests.get(f"{url}/healthz", timeout=5)
            if response.status_code == 200:
                BASE_URL = url
                print(f"‚úÖ PASS: –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {BASE_URL}")
                return True
        except requests.exceptions.RequestException:
            continue
    
    print("‚ùå FAIL: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Å–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º!")
    return False

def test_health_check():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    response = requests.get(f"{BASE_URL}/healthz")
    return response.status_code == 200

def test_list_dashboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    response = requests.get(f"{BASE_URL}/api")
    return response.status_code == 200

def test_get_folders():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–ø–æ–∫"""
    response = requests.get(f"{BASE_URL}/api/folders")
    return response.status_code == 200

def test_create_dashboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    new_dashboard = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥",
        "type": "flot",
        "options": {}
    }
    response = requests.post(f"{BASE_URL}/api", json=new_dashboard)
    return response.status_code == 201

def test_get_dashboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ ID"""
    dashboard_id = 1  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID
    response = requests.get(f"{BASE_URL}/api/{dashboard_id}")
    return response.status_code == 200

def test_update_dashboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    dashboard_id = 1  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID
    updated_dashboard = {
        "name": "–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥",
        "type": "graph",
        "options": {}
    }
    response = requests.put(f"{BASE_URL}/api/{dashboard_id}", json=updated_dashboard)
    return response.status_code == 200

def test_dashboard_panels():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–Ω–µ–ª–∏ –¥–∞—à–±–æ—Ä–¥–∞"""
    dashboard_id = 1  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID
    response = requests.get(f"{BASE_URL}/api/{dashboard_id}/panels")
    return response.status_code == 200

def test_delete_dashboard():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    dashboard_id = 1  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID
    response = requests.delete(f"{BASE_URL}/api/{dashboard_id}")
    return response.status_code == 204

def test_data_sources():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    response = requests.get(f"{BASE_URL}/api/datasources")
    return response.status_code == 200

def test_prometheus_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Prometheus"""
    response = requests.get(f"{BASE_URL}/api/prometheus")
    return response.status_code == 200

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    response = requests.get(f"{BASE_URL}/api/invalid-endpoint")
    return response.status_code == 404

def test_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä: –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å)"""
    start = time.time()
    requests.get(f"{BASE_URL}/api")
    duration = time.time() - start
    return duration < 2  # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ 2 —Å–µ–∫—É–Ω–¥

def test_grafana_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –º–µ—Ç—Ä–∏–∫ Grafana (Prometheus —Ñ–æ—Ä–º–∞—Ç)"""
    response = requests.get(f"{BASE_URL}/api/metrics", timeout=15)
    
    if response.status_code == 200:
        metrics_text = response.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ Prometheus —Ñ–æ—Ä–º–∞—Ç–µ
        required_metrics = [
            "grafana_dashboards_total",
            "grafana_panels_total", 
            "grafana_api_response_time_milliseconds",
            "grafana_health_status"
        ]
        
        for metric in required_metrics:
            if metric not in metrics_text:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∞: {metric}")
                return False
        
        print(f"üìä Prometheus –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
        return True
    
    return False

def test_json_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –º–µ—Ç—Ä–∏–∫ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    response = requests.get(f"{BASE_URL}/api/metrics/json", timeout=15)
    
    if response.status_code == 200:
        metrics = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["total_dashboards", "total_panels", "api_response_time_ms", "grafana_health_status"]
        
        for field in required_fields:
            if field not in metrics:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
                return False
        
        print(f"üìä –î–∞—à–±–æ—Ä–¥–æ–≤: {metrics['total_dashboards']}")
        print(f"üìà –ü–∞–Ω–µ–ª–µ–π: {metrics['total_panels']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics['api_response_time_ms']}ms")
        print(f"üíö Grafana –∑–¥–æ—Ä–æ–≤–∞: {metrics['grafana_health_status']}")
        
        return True
    
    return False

def test_metrics_summary():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫"""
    response = requests.get(f"{BASE_URL}/api/metrics/summary", timeout=10)
    
    if response.status_code == 200:
        summary = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        required_keys = ["summary", "details", "endpoints", "raw_metrics"]
        
        for key in required_keys:
            if key not in summary:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ summary: {key}")
                return False
        
        print(f"üìù Summary: {summary.get('summary', 'N/A')}")
        return True
    
    return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    if not check_service_availability():
        print("‚ùå FAIL: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–µ—Å—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        print("\nüí° –°–û–í–ï–¢–´ –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up dashboards-service")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: docker-compose ps") 
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs dashboards-service")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç 8050 —Å–≤–æ–±–æ–¥–µ–Ω")
        return False
    
    tests = [
        ("Health Check", test_health_check),
        ("Prometheus Metrics", test_grafana_metrics),
        ("JSON Metrics", test_json_metrics),
        ("Metrics Summary", test_metrics_summary),
        ("List Dashboards", test_list_dashboards),
        ("Get Folders", test_get_folders),
        ("Create Dashboard", test_create_dashboard),
        ("Get Dashboard", test_get_dashboard),
        ("Update Dashboard", test_update_dashboard),
        ("Dashboard Panels", test_dashboard_panels),
        ("Delete Dashboard", test_delete_dashboard),
        ("Data Sources", test_data_sources),
        ("Error Handling", test_error_handling),
        ("Performance", test_performance),
    ]
    
    passed = 0
    total = len(tests)
    failed_tests = []
    
    for i, (name, test_func) in enumerate(tests, 1):
        try:
            print(f"\n[{i:2d}/{total}] üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {name}")
            
            if test_func():
                print(f"[{i:2d}/{total}] ‚úÖ PASS {name}")
                passed += 1
            else:
                print(f"[{i:2d}/{total}] ‚ùå FAIL {name}")
                failed_tests.append(name)
                
        except requests.exceptions.ConnectionError:
            print(f"[{i:2d}/{total}] ‚ùå FAIL {name} - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            failed_tests.append(name)
        except Exception as e:
            print(f"[{i:2d}/{total}] ‚ùå FAIL {name} - Exception: {str(e)}")
            failed_tests.append(name)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    
    if failed_tests:
        print("–ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for test in failed_tests:
            print(f"- {test}")
    
    return passed == total

if __name__ == "__main__":
    run_all_tests()