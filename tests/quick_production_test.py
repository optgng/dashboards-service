#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
"""

import requests
import json

BASE_URL = "http://localhost:8050"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
created_dashboard_uid = None

def print_test_header(message):
    print(f"üöÄ {message}")
    print("=" * 60)

def print_success(message):
    print(f"‚úÖ PASS {message}")

def print_error(message):
    print(f"‚ùå FAIL {message}")

def print_info(message):
    print(f"    üìù {message}")

def test_health_check():
    """–¢–µ—Å—Ç health check —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("1. Health Check...")
    try:
        response = requests.get(f"{BASE_URL}/healthz")
        if response.status_code == 200:
            data = response.json()
            print_success("Health Check")
            print_info(f"Status: {response.status_code}, Response: {data}")
            return True
        else:
            print_error(f"Health Check - Status: {response.status_code}")
            return False
    except Exception as e:
        print_error(f"Health Check - Error: {str(e)}")
        return False

def test_metrics_endpoints():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫"""
    print("4. Metrics Endpoints...")
    try:
        # –¢–µ—Å—Ç Prometheus –º–µ—Ç—Ä–∏–∫
        response = requests.get(f"{BASE_URL}/api/metrics")
        if response.status_code == 200 and "grafana_dashboards_total" in response.text:
            print_success("Prometheus Metrics")
            print_info("Prometheus format detected")
        else:
            print_error(f"Prometheus Metrics failed: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç JSON –º–µ—Ç—Ä–∏–∫
        response = requests.get(f"{BASE_URL}/api/metrics/json")
        if response.status_code == 200:
            data = response.json()
            print_success("JSON Metrics")
            print_info(f"Dashboards: {data.get('total_dashboards', 'N/A')}, Panels: {data.get('total_panels', 'N/A')}")
        else:
            print_error(f"JSON Metrics failed: {response.status_code}")
            return False
            
        # –¢–µ—Å—Ç Summary –º–µ—Ç—Ä–∏–∫
        response = requests.get(f"{BASE_URL}/api/metrics/summary")
        if response.status_code == 200:
            print_success("Metrics Summary")
            return True
        else:
            print_error(f"Metrics Summary failed: {response.status_code}")
            return False
            
    except Exception as e:
        print_error(f"Metrics Error: {str(e)}")
        return False

def test_basic_crud():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    global created_dashboard_uid
    print("2. Basic CRUD Operations...")
    
    # CREATE
    dashboard_data = {
        "dashboard": {
            "title": "Quick Test Dashboard",
            "tags": ["test"],
            "panels": [],
            "time": {"from": "now-6h", "to": "now"},
            "refresh": "30s",
            "timezone": "browser",
            "schemaVersion": 16
        },
        "folderId": 0,
        "overwrite": True
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/", json=dashboard_data)
        if response.status_code == 201:
            created_dashboard_uid = response.json().get("uid")
            print_success("Dashboard Create (201)")
            print_info(f"UID: {created_dashboard_uid}")
        else:
            print_error(f"Create failed: {response.status_code}")
            return False
        
        # READ
        response = requests.get(f"{BASE_URL}/api/{created_dashboard_uid}")
        if response.status_code == 200:
            print_success("Dashboard Read (200)")
        else:
            print_error(f"Read failed: {response.status_code}")
            return False
        
        # DELETE
        response = requests.delete(f"{BASE_URL}/api/{created_dashboard_uid}")
        if response.status_code in [200, 204]:
            print_success("Dashboard Delete")
            print_info("CRUD operations completed successfully")
            return True
        else:
            print_error(f"Delete failed: {response.status_code}")
            return False
            
    except Exception as e:
        print_error(f"CRUD Error: {str(e)}")
        return False

def test_list_dashboards():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    print("3. List Dashboards...")
    try:
        response = requests.get(f"{BASE_URL}/api/")
        if response.status_code == 200:
            dashboards = response.json()
            print_success("Dashboard List")
            print_info(f"Found {len(dashboards)} dashboards")
            return True
        else:
            print_error(f"List failed: {response.status_code}")
            return False
    except Exception as e:
        print_error(f"List Error: {str(e)}")
        return False

def print_final_report(results):
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print("=" * 60)
    print("üìä –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ù –ì–û–¢–û–í–ù–û–°–¢–ò")
    print("=" * 60)
    
    passed = sum(1 for r in results if r)
    total = len(results)
    success_rate = (passed / total) * 100
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if success_rate == 100:
        print("üéâ –í–°–ï –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏.")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–Ω.")

def main():
    print_test_header("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    results = [
        test_health_check(),
        test_basic_crud(),
        test_list_dashboards(),
        test_metrics_endpoints()
    ]
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print_final_report(results)
    print("üèÅ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()
