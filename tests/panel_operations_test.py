#!/usr/bin/env python3
"""–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""

import requests
import json
import time
import socket

# –í–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
POSSIBLE_BASE_URLS = [
    "http://localhost:8050",
    "http://127.0.0.1:8050", 
    "http://dashboards-service.localhost:8050"
]

BASE_URL = None

def print_test_header(test_name):
    print(f"\n=== {test_name} ===")

def print_success(message):
    print(f"‚úÖ PASS: {message}")

def print_error(message):
    print(f"‚ùå FAIL: {message}")

def print_info(message):
    print(f"üìù INFO: {message}")

def check_service_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–±–æ—á–∏–π URL"""
    global BASE_URL
    
    print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞...")
    
    for url in POSSIBLE_BASE_URLS:
        try:
            print_info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {url}")
            response = requests.get(f"{url}/healthz", timeout=5)
            if response.status_code == 200:
                BASE_URL = url
                print_success(f"–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {BASE_URL}")
                return True
        except requests.exceptions.RequestException as e:
            print_info(f"URL {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
            continue
    
    print_error("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Å–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º!")
    print_info("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
    print_info("1. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä dashboards-service –∑–∞–ø—É—â–µ–Ω")
    print_info("2. –ü–æ—Ä—Ç 8050 –æ—Ç–∫—Ä—ã—Ç")
    print_info("3. –°–µ—Ä–≤–∏—Å –ø—Ä–æ—à–µ–ª health check")
    return False

def wait_for_service(max_wait_time=60):
    """–ñ–¥–µ—Ç –ø–æ–∫–∞ —Å–µ—Ä–≤–∏—Å —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º"""
    print_info(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ (–º–∞–∫—Å–∏–º—É–º {max_wait_time} —Å–µ–∫—É–Ω–¥)...")
    
    start_time = time.time()
    while time.time() - start_time < max_wait_time:
        if check_service_availability():
            return True
        print_info("–ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        time.sleep(5)
    
    return False

def test_panel_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–Ω–µ–ª—è–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–æ–≤
    if not check_service_availability():
        if not wait_for_service():
            print_error("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–µ—Å—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã.")
            return False
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    dashboard_uid = None
    panel_id = None
    
    try:
        print_test_header("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
        dashboard_data = {
            "dashboard": {
                "title": "Panel Operations Test Dashboard",
                "tags": ["test", "panels"],
                "panels": [],
                "timezone": "browser",
                "schemaVersion": 16
            },
            "folderId": 0,
            "overwrite": True
        }
        
        response = requests.post(f"{BASE_URL}/api/", json=dashboard_data, timeout=10)
        if response.status_code == 201:
            result = response.json()
            dashboard_uid = result["uid"]
            print_success(f"Dashboard created with UID: {dashboard_uid}")
        else:
            print_error(f"Failed to create dashboard: {response.status_code} - {response.text}")
            return False
        
        print_test_header("2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        panel_data = {
            "title": "Test Panel",
            "type": "graph", 
            "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
            },
            "targets": [{
                "refId": "A",
                "expr": "up",
                "datasource": {
                    "type": "prometheus", 
                    "uid": "prometheus"
                },
                "format": "time_series"
            }],
            "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 0
            },
            "options": {}
        }
        
        response = requests.post(f"{BASE_URL}/api/{dashboard_uid}/panels", json=panel_data)
        if response.status_code == 200:
            result = response.json()
            panel_id = result.get("id")
            print_success(f"Panel created with ID: {panel_id}")
        else:
            print_error(f"Failed to create panel: {response.status_code} - {response.text}")
            return False
            
        print_test_header("3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ ID")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        response = requests.get(f"{BASE_URL}/api/{dashboard_uid}/panels/{panel_id}")
        if response.status_code == 200:
            result = response.json()
            print_success(f"Panel retrieved: {result.get('title', 'No title')}")
            print_info(f"Panel ID: {result.get('id')}, Type: {result.get('type')}")
        else:
            print_error(f"Failed to get panel: {response.status_code} - {response.text}")
            
        print_test_header("4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        updated_panel_data = {
            "title": "Updated Test Panel",
            "type": "graph",
            "datasource": {
                "type": "prometheus",
                "uid": "prometheus" 
            },
            "targets": [{
                "refId": "A",
                "expr": "cpu_usage",
                "datasource": {
                    "type": "prometheus",
                    "uid": "prometheus"
                },
                "format": "time_series"
            }],
            "gridPos": {
                "h": 9,
                "w": 14,
                "x": 0,
                "y": 0
            },
            "options": {"legend": {"displayMode": "table"}}
        }
        
        response = requests.put(f"{BASE_URL}/dashboards/{dashboard_uid}/panels/{panel_id}", json=updated_panel_data)
        if response.status_code == 200:
            result = response.json()
            print_success(f"Panel updated: {result.get('title', 'No title')}")
        else:
            print_error(f"Failed to update panel: {response.status_code} - {response.text}")
            
        print_test_header("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        response = requests.get(f"{BASE_URL}/dashboards/{dashboard_uid}/panels/{panel_id}")
        if response.status_code == 200:
            result = response.json()
            if result.get("title") == "Updated Test Panel":
                print_success(f"Panel successfully updated: {result.get('title')}")
            else:
                print_error(f"Panel title not updated correctly: {result.get('title')}")
        else:
            print_error(f"Failed to verify updated panel: {response.status_code}")
            
        print_test_header("6. –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        response = requests.delete(f"{BASE_URL}/dashboards/{dashboard_uid}/panels/{panel_id}")
        if response.status_code in [200, 204]:
            print_success("Panel deleted successfully")
        else:
            print_error(f"Failed to delete panel: {response.status_code} - {response.text}")
            
        print_test_header("7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∞
        response = requests.get(f"{BASE_URL}/dashboards/{dashboard_uid}/panels/{panel_id}")
        if response.status_code == 404:
            print_success("Panel successfully deleted (404 Not Found)")
        else:
            print_error(f"Panel still exists after deletion: {response.status_code}")
            
        print_test_header("8. –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥
        response = requests.delete(f"{BASE_URL}/api/{dashboard_uid}")
        if response.status_code in [200, 204]:
            print_success("Test dashboard deleted")
        else:
            print_error(f"Failed to delete test dashboard: {response.status_code}")
            
        return True
        
    except requests.exceptions.ConnectionError as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É: {e}")
        print_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    except requests.exceptions.Timeout as e:
        print_error(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print_error(f"Test failed with exception: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ü–ê–ù–ï–õ–¨–ù–´–• –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 55)
    
    success = test_panel_operations()
    
    print("\n" + "=" * 55)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–ê–ù–ï–õ–ï–ô –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("\nüí° –°–û–í–ï–¢–´ –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up dashboards-service")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: docker-compose ps")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs dashboards-service")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç 8050 —Å–≤–æ–±–æ–¥–µ–Ω: netstat -an | findstr 8050")
    print("=" * 55)
