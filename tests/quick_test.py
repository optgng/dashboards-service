#!/usr/bin/env python3
"""–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π dashboards-service"""

import requests
import json
import time

# –í–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
POSSIBLE_BASE_URLS = [
    "http://localhost:8050",
    "http://127.0.0.1:8050", 
    "http://dashboards-service.localhost:8050"
]

BASE_URL = None

def check_service_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–±–æ—á–∏–π URL"""
    global BASE_URL
    
    print("üìù INFO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞...")
    
    for url in POSSIBLE_BASE_URLS:
        try:
            print(f"üìù INFO: –ü—Ä–æ–≤–µ—Ä—è–µ–º {url}")
            response = requests.get(f"{url}/healthz", timeout=5)
            if response.status_code == 200:
                BASE_URL = url
                print(f"‚úÖ PASS: –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {BASE_URL}")
                return True
        except requests.exceptions.RequestException:
            continue
    
    print("‚ùå FAIL: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Å–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º!")
    return False

def quick_test():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    if not check_service_availability():
        print("‚ùå FAIL: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–µ—Å—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        return False
    
    tests = [
        ("Health Check", lambda: requests.get(f"{BASE_URL}/healthz", timeout=10)),
        ("Prometheus Metrics", lambda: requests.get(f"{BASE_URL}/api/metrics", timeout=10)),
        ("JSON Metrics", lambda: requests.get(f"{BASE_URL}/api/metrics/json", timeout=10)),
        ("Metrics Summary", lambda: requests.get(f"{BASE_URL}/api/metrics/summary", timeout=10)),
        ("List Dashboards", lambda: requests.get(f"{BASE_URL}/api/", timeout=10)),
    ]
    
    passed = 0
    total = len(tests)
    
    for i, (name, test_func) in enumerate(tests, 1):
        try:
            response = test_func()
            if response.status_code in [200, 201]:
                print(f"[{i:2d}/{total}] ‚úÖ PASS {name}")
                passed += 1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
                if "Metrics" in name and response.status_code == 200:
                    if name == "JSON Metrics":
                        try:
                            data = response.json()
                            print(f"         üìä –î–∞—à–±–æ—Ä–¥–æ–≤: {data.get('total_dashboards', 'N/A')}")
                            print(f"         üìà –ü–∞–Ω–µ–ª–µ–π: {data.get('total_panels', 'N/A')}")
                            print(f"         ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {data.get('api_response_time_ms', 'N/A')}ms")
                        except:
                            pass
            else:
                print(f"[{i:2d}/{total}] ‚ùå FAIL {name}")
                print(f"         üìù Status: {response.status_code}, Response: {response.text[:100]}")
        except requests.exceptions.ConnectionError:
            print(f"[{i:2d}/{total}] ‚ùå FAIL {name}")
            print(f"         üìù Exception: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É")
        except Exception as e:
            print(f"[{i:2d}/{total}] ‚ùå FAIL {name}")
            print(f"         üìù Exception: {str(e)}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    return passed == total

if __name__ == "__main__":
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ DASHBOARDS-SERVICE")
    print("=" * 40)
    
    success = quick_test()
    
    if not success:
        print("\nüí° –°–û–í–ï–¢–´ –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up dashboards-service")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: docker-compose ps")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs dashboards-service")